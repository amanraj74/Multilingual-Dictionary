"""
ЁЯМН SARVAM-TRANSLATE Model via Hugging Face
AI4Bharat + Sarvam AI - ALL 22 Indian Languages
"""

import requests
import time
import json

# Sarvam-Translate supported languages
SARVAM_LANGUAGES = [
    "Assamese", "Bengali", "Bodo", "Dogri", "Gujarati", "Hindi",
    "Kannada", "Kashmiri", "Konkani", "Maithili", "Malayalam",
    "Manipuri", "Marathi", "Nepali", "Odia", "Punjabi",
    "Sanskrit", "Santali", "Sindhi", "Tamil", "Telugu", "Urdu"
]

class UltimateTranslator:
    def __init__(self, sarvam_api_key=None, huggingface_token=None, gemini_api_key=None):
        self.hf_token = huggingface_token
        
        # Sarvam-Translate model endpoint
        self.model_url = "https://api-inference.huggingface.co/models/sarvamai/sarvam-translate"
        
        self.session = requests.Session()
        self.stats = {"sarvam_translate": 0, "fallback": 0}
        
        print("="*80)
        print("ЁЯМН SARVAM-TRANSLATE (AI4Bharat) via Hugging Face")
        print(f"Token: {'тЬЕ Provided' if huggingface_token else 'тЪая╕П  Using public API (slower)'}")
        print("ALL 22 Indian Languages Supported")
        print("="*80)
    
    def translate_sarvam_hf(self, text, target_language):
        """Sarvam-Translate via Hugging Face Inference API"""
        if target_language not in SARVAM_LANGUAGES:
            return None
        
        try:
            headers = {"Content-Type": "application/json"}
            if self.hf_token:
                headers["Authorization"] = f"Bearer {self.hf_token}"
            
            # Format as chat conversation (as per model requirements)
            conversation = [
                {
                    "role": "system",
                    "content": f"Translate the text below to {target_language}."
                },
                {
                    "role": "user",
                    "content": text
                }
            ]
            
            payload = {
                "inputs": json.dumps(conversation),
                "parameters": {
                    "max_new_tokens": 256,
                    "temperature": 0.01,
                    "do_sample": True,
                    "return_full_text": False
                },
                "options": {
                    "wait_for_model": True,
                    "use_cache": False
                }
            }
            
            response = requests.post(
                self.model_url,
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                
                # Parse response
                translation = None
                if isinstance(result, list) and len(result) > 0:
                    if 'generated_text' in result[0]:
                        translation = result[0]['generated_text']
                    elif isinstance(result[0], str):
                        translation = result[0]
                elif isinstance(result, dict) and 'generated_text' in result:
                    translation = result['generated_text']
                
                if translation:
                    # Clean the translation
                    translation = translation.strip()
                    
                    # Remove common artifacts
                    remove_prefixes = [
                        "Translation:",
                        f"{target_language}:",
                        "Output:",
                        "Answer:",
                        "assistant\n",
                        "<|assistant|>",
                    ]
                    
                    for prefix in remove_prefixes:
                        if translation.lower().startswith(prefix.lower()):
                            translation = translation[len(prefix):].strip()
                    
                    # Remove quotes if wrapped
                    if translation.startswith('"') and translation.endswith('"'):
                        translation = translation[1:-1]
                    if translation.startswith("'") and translation.endswith("'"):
                        translation = translation[1:-1]
                    
                    if translation and translation != text:
                        self.stats["sarvam_translate"] += 1
                        return translation
            
            # Model loading (503)
            elif response.status_code == 503:
                error_data = response.json()
                if 'estimated_time' in error_data:
                    wait_time = min(error_data['estimated_time'], 10)
                    print(f"Model loading... waiting {wait_time}s")
                    time.sleep(wait_time + 2)
                    # Retry once
                    return self.translate_sarvam_hf(text, target_language)
                else:
                    time.sleep(5)
                    return self.translate_sarvam_hf(text, target_language)
            
            else:
                print(f"HF API error ({target_language}): {response.status_code}")
        
        except Exception as e:
            print(f"Sarvam-Translate error ({target_language}): {str(e)[:60]}")
        
        return None
    
    def translate_fallback(self, text, target_language):
        """Comprehensive fallback dictionary"""
        
        words = {
            "potato": {"Hindi": "рдЖрд▓реВ", "Bengali": "ржЖрж▓рзБ", "Tamil": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "Telugu": "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к", "Malayalam": "р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н", "Kannada": "р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж", "Marathi": "рдмрдЯрд╛рдЯрд╛", "Gujarati": "ркмркЯрк╛ркХрк╛", "Odia": "рмЖрм│рнБ", "Punjabi": "риЖри▓рйВ", "Assamese": "ржЖрж▓рзБ", "Urdu": "╪в┘Д┘И", "Maithili": "рдЖрд▓реВ", "Sanskrit": "рдЖрд▓реБрдХрдореН", "Konkani": "рдЖрд│реВ", "Nepali": "рдЖрд▓реБ", "Sindhi": "╪в┘Д┘И", "Dogri": "рдЖрд▓реВ", "Manipuri": "ржЖрж▓рзБ", "Bodo": "рдЖрд▓реВ", "Kashmiri": "╪в┘Д┘И", "Santali": "рдЖрд▓реВ"},
            "apple": {"Hindi": "рд╕реЗрдм", "Bengali": "ржЖржкрзЗрж▓", "Tamil": "роЖрокрпНрокро┐ро│рпН", "Telugu": "р░Жр░кр░┐р░▓р▒Н", "Malayalam": "р┤Жр┤кр╡Нр┤кр┤┐р╡╛", "Kannada": "р▓╕р│Зр▓мр│Б", "Marathi": "рд╕рдлрд░рдЪрдВрдж", "Gujarati": "рк╕рклрк░ркЬрки", "Odia": "рм╕рнЗрмУ", "Punjabi": "ри╕рйЗрим", "Assamese": "ржЖржкрзЗрж▓", "Urdu": "╪│█М╪и", "Maithili": "рд╕реЗрдм", "Sanskrit": "рд╕реЗрд╡рдореН", "Konkani": "рд╕рдлрд░рдЪрдВрдж", "Nepali": "рд╕реНрдпрд╛рдЙ", "Sindhi": "╪│┘К╪и", "Dogri": "рд╕реЗрдм", "Manipuri": "ржЖржкрзЗрж▓", "Bodo": "рд╕реЗрдм", "Kashmiri": "┌Ж┌╛┘П┘Ж┘╣┌╛", "Santali": "рд╕реЗрдм"},
            "ladyfinger": {"Hindi": "рднрд┐рдВрдбреА", "Bengali": "ржврзЗржБржбрж╝рж╕", "Tamil": "ро╡рпЖрогрпНроЯрпИроХрпНроХро╛ропрпН", "Telugu": "р░мр▒Жр░Вр░бр░Хр░╛р░п", "Malayalam": "р┤╡р╡Жр┤гр╡Нр┤Яр┤Хр╡Нр┤Х", "Kannada": "р▓мр│Жр▓Вр▓бр│Жр▓Хр▓╛р▓пр▓┐", "Marathi": "рднреЗрдВрдбреА", "Gujarati": "ркнрлАркВркбрк╛", "Odia": "рмнрнЗрмгрнНрмбрм┐", "Punjabi": "ринри┐рй░рибрйА", "Assamese": "ржнрзЗржгрзНржбрж┐", "Urdu": "╪и┌╛┘Ж┌И█М", "Maithili": "рднрд┐рдВрдбреА", "Sanskrit": "рднрд┐рдгреНрдбреА", "Konkani": "рднреЗрдВрдбреЗрдВ", "Nepali": "рднрд┐рдВрдбреА", "Sindhi": "┌А┘Ж┌К┘К", "Dogri": "рднрд┐рдВрдбреА"},
            "tomato": {"Hindi": "рдЯрдорд╛рдЯрд░", "Bengali": "ржЯржорзЗржЯрзЛ", "Tamil": "родроХрпНроХро╛ро│ро┐", "Telugu": "р░Яр░ор░╛р░Яр▒Л", "Malayalam": "р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐", "Kannada": "р▓Яр│Кр▓ор│Зр▓Яр│К", "Marathi": "рдЯреЛрдореЕрдЯреЛ", "Gujarati": "ркЯрк╛ркорлЗркЯрлБркВ", "Odia": "рмЯрморм╛рмЯрнЛ", "Punjabi": "риЯриори╛риЯри░", "Assamese": "ржЯржорзЗржЯрзЛ", "Urdu": "┘╣┘Е╪з┘╣╪▒"},
            "onion": {"Hindi": "рдкреНрдпрд╛рдЬ", "Bengali": "ржкрзЗржБржпрж╝рж╛ржЬ", "Tamil": "ро╡рпЖроЩрпНроХро╛ропроорпН", "Telugu": "р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п", "Malayalam": "р┤Йр┤│р╡Нр┤│р┤┐", "Kannada": "р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐", "Marathi": "рдХрд╛рдВрджрд╛", "Gujarati": "ркбрлБркВркЧрк│рлА", "Odia": "рмкрм┐рмЖрмЬ", "Punjabi": "рикри┐риЖриЬри╝", "Assamese": "ржкрж┐ржБржпрж╝рж╛ржЬ", "Urdu": "┘╛█М╪з╪▓"},
            "water": {"Hindi": "рдкрд╛рдиреА", "Bengali": "ржЬрж▓", "Tamil": "роирпАро░рпН", "Telugu": "р░ир▒Ар░░р▒Б", "Malayalam": "р┤╡р╡Жр┤│р╡Нр┤│р┤В", "Kannada": "р▓ир│Ар▓░р│Б", "Marathi": "рдкрд╛рдгреА", "Gujarati": "рккрк╛ркгрлА", "Odia": "рмкрм╛рмгрм┐", "Punjabi": "рикри╛ригрйА", "Assamese": "ржкрж╛ржирзА", "Urdu": "┘╛╪з┘Ж█М"},
            "rice": {"Hindi": "рдЪрд╛рд╡рд▓", "Bengali": "ржнрж╛ржд", "Tamil": "роЕро░ро┐роЪро┐", "Telugu": "р░Ер░ир▒Нр░ир░В", "Malayalam": "р┤Ър╡Лр┤▒р╡Н", "Kannada": "р▓Ер▓ир│Нр▓и", "Marathi": "рддрд╛рдВрджреВрд│", "Gujarati": "ркЪрлЛркЦрк╛", "Odia": "рмЪрм╛рмЙрм│", "Punjabi": "риЪрйМри▓", "Assamese": "ржнрж╛ржд", "Urdu": "┌Ж╪з┘И┘Д"},
            "food": {"Hindi": "рднреЛрдЬрди", "Bengali": "ржЦрж╛ржмрж╛рж░", "Tamil": "роЙрогро╡рпБ", "Telugu": "р░Жр░╣р░╛р░░р░В", "Malayalam": "р┤нр┤Хр╡Нр┤╖р┤гр┤В", "Kannada": "р▓Жр▓╣р▓╛р▓░", "Marathi": "рдЕрдиреНрди", "Gujarati": "ркЦрлЛрк░рк╛ркХ", "Odia": "рмЦрм╛рмжрнНрнЯ", "Punjabi": "ринрйЛриЬрии", "Assamese": "ржЦрж╛ржжрзНржп", "Urdu": "┌й┌╛╪з┘Ж╪з"}
        }
        
        if text.lower() in words and target_language in words[text.lower()]:
            self.stats["fallback"] += 1
            return words[text.lower()][target_language]
        
        return None
    
    def translate(self, text, target_language):
        """Main translation function"""
        text = text.strip()
        if not text:
            return "", "none"
        
        # 1. Try Sarvam-Translate model
        result = self.translate_sarvam_hf(text, target_language)
        if result:
            return result, "sarvam_translate"
        
        # 2. Try fallback
        result = self.translate_fallback(text, target_language)
        if result:
            return result, "fallback"
        
        return "Translation unavailable", "none"
    
    def get_stats(self):
        total = sum(self.stats.values())
        if total == 0:
            return "No translations yet"
        return f"Sarvam-Translate: {self.stats['sarvam_translate']} | Fallback: {self.stats['fallback']} | Total: {total}"

_translator = None

def get_translator(sarvam_api_key=None, huggingface_token=None, gemini_api_key=None):
    global _translator
    if _translator is None:
        _translator = UltimateTranslator(sarvam_api_key, huggingface_token, gemini_api_key)
    return _translator
