"""
ЁЯМН INDICTRANS2 - AI4Bharat via Hugging Face
ALL 22 Indian Languages - FAST & RELIABLE
"""

import requests
import time

# IndicTrans2 language codes
INDICTRANS_CODES = {
    "Hindi": "hin_Deva", "Bengali": "ben_Beng", "Tamil": "tam_Taml",
    "Telugu": "tel_Telu", "Malayalam": "mal_Mlym", "Kannada": "kan_Knda",
    "Marathi": "mar_Deva", "Gujarati": "guj_Gujr", "Odia": "ory_Orya",
    "Punjabi": "pan_Guru", "Assamese": "asm_Beng", "Urdu": "urd_Arab",
    "Maithili": "mai_Deva", "Sanskrit": "san_Deva", "Konkani": "gom_Deva",
    "Nepali": "npi_Deva", "Sindhi": "snd_Deva", "Dogri": "doi_Deva",
    "Manipuri": "mni_Mtei", "Bodo": "brx_Deva", "Kashmiri": "kas_Arab",
    "Santali": "sat_Olck"
}

class UltimateTranslator:
    def __init__(self, sarvam_api_key=None, huggingface_token=None, gemini_api_key=None):
        self.hf_token = huggingface_token
        
        # IndicTrans2 model (FAST & RELIABLE!)
        self.model_url = "https://api-inference.huggingface.co/models/ai4bharat/indictrans2-en-indic-1B"
        
        self.session = requests.Session()
        self.stats = {"indictrans": 0, "fallback": 0}
        
        print("="*80)
        print("ЁЯМН INDICTRANS2 (AI4Bharat) via Hugging Face")
        print(f"Token: {'тЬЕ' if huggingface_token else 'тЪая╕П  Public (works but slower)'}")
        print("="*80)
    
    def translate_indictrans(self, text, target_language):
        """IndicTrans2 - FAST & RELIABLE"""
        if target_language not in INDICTRANS_CODES:
            return None
        
        try:
            headers = {}
            if self.hf_token:
                headers["Authorization"] = f"Bearer {self.hf_token}"
            
            payload = {
                "inputs": text,
                "parameters": {
                    "src_lang": "eng_Latn",
                    "tgt_lang": INDICTRANS_CODES[target_language],
                    "max_length": 256
                }
            }
            
            response = requests.post(
                self.model_url,
                headers=headers,
                json=payload,
                timeout=20
            )
            
            if response.status_code == 200:
                result = response.json()
                
                translation = None
                if isinstance(result, list) and len(result) > 0:
                    if 'translation_text' in result[0]:
                        translation = result[0]['translation_text']
                    elif 'generated_text' in result[0]:
                        translation = result[0]['generated_text']
                    elif isinstance(result[0], str):
                        translation = result[0]
                elif isinstance(result, dict):
                    translation = result.get('translation_text') or result.get('generated_text')
                
                if translation:
                    translation = translation.strip()
                    if translation and translation != text:
                        self.stats["indictrans"] += 1
                        return translation
            
            # Model loading
            elif response.status_code == 503:
                print(f"Loading model for {target_language}...")
                time.sleep(5)
                return self.translate_indictrans(text, target_language)
        
        except Exception as e:
            print(f"IndicTrans error ({target_language}): {str(e)[:50]}")
        
        return None
    
    def translate_fallback(self, text, target_language):
        """Fallback dictionary - 10+ common words"""
        
        words = {
            "potato": {"Hindi": "рдЖрд▓реВ", "Bengali": "ржЖрж▓рзБ", "Tamil": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "Telugu": "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к", "Malayalam": "р┤Йр┤░р╡Бр┤│р┤Хр╡Нр┤Хр┤┐р┤┤р┤Щр╡Нр┤Щр╡Н", "Kannada": "р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж", "Marathi": "рдмрдЯрд╛рдЯрд╛", "Gujarati": "ркмркЯрк╛ркХрк╛", "Odia": "рмЖрм│рнБ", "Punjabi": "риЖри▓рйВ", "Assamese": "ржЖрж▓рзБ", "Urdu": "╪в┘Д┘И", "Maithili": "рдЖрд▓реВ", "Sanskrit": "рдЖрд▓реБрдХрдореН", "Konkani": "рдЖрд│реВ", "Nepali": "рдЖрд▓реБ", "Sindhi": "╪в┘Д┘И", "Dogri": "рдЖрд▓реВ", "Manipuri": "ржЖрж▓рзБ", "Bodo": "рдЖрд▓реВ", "Kashmiri": "╪в┘Д┘И", "Santali": "рдЖрд▓реВ"},
            "apple": {"Hindi": "рд╕реЗрдм", "Bengali": "ржЖржкрзЗрж▓", "Tamil": "роЖрокрпНрокро┐ро│рпН", "Telugu": "р░Жр░кр░┐р░▓р▒Н", "Malayalam": "р┤Жр┤кр╡Нр┤кр┤┐р╡╛", "Kannada": "р▓╕р│Зр▓мр│Б", "Marathi": "рд╕рдлрд░рдЪрдВрдж", "Gujarati": "рк╕рклрк░ркЬрки", "Odia": "рм╕рнЗрмУ", "Punjabi": "ри╕рйЗрим", "Assamese": "ржЖржкрзЗрж▓", "Urdu": "╪│█М╪и", "Maithili": "рд╕реЗрдм", "Sanskrit": "рд╕реЗрд╡рдореН", "Konkani": "рд╕рдлрд░рдЪрдВрдж", "Nepali": "рд╕реНрдпрд╛рдЙ", "Sindhi": "╪│┘К╪и", "Dogri": "рд╕реЗрдм", "Manipuri": "ржЖржкрзЗрж▓", "Bodo": "рд╕реЗрдм", "Kashmiri": "┌Ж┌╛┘П┘Ж┘╣┌╛", "Santali": "рд╕реЗрдм"},
            "pineapple": {"Hindi": "рдЕрдирд╛рдирд╛рд╕", "Bengali": "ржЖржирж╛рж░рж╕", "Tamil": "роЕройрпНройро╛роЪро┐", "Telugu": "р░Ер░ир░╛р░╕р░кр░Вр░бр▒Б", "Malayalam": "р┤Хр╡Ир┤др┤Ър╡Нр┤Ър┤Хр╡Нр┤Х", "Kannada": "р▓Ер▓ир▓╛р▓ир▓╕р│Н", "Marathi": "рдЕрдирдирд╕", "Gujarati": "ркЕркирк╛ркирк╕", "Odia": "рмЖрмирмирнНрмирм╛", "Punjabi": "риЕриири╛риири╛ри╕", "Assamese": "ржоржзрзБрз░рж┐ ржЖржо", "Urdu": "╪з┘Ж┘Ж╪з╪│", "Maithili": "рдЕрдирд╛рдирд╛рд╕", "Sanskrit": "рдЕрдирд╛рдирд╛рд╕рдореН", "Konkani": "рдЕрдирдирд╕", "Nepali": "рднреБрдЗрдБ рдХрд╛рдБрдЯрд╛", "Sindhi": "╪з┘Ж┘Ж╪з╪│", "Dogri": "рдЕрдирд╛рдирд╛рд╕", "Manipuri": "ржЖржирж╛рж░рж╕", "Bodo": "рдЕрдирд╛рдирд╛рд╕", "Kashmiri": "╪з┘Ж╪з┘Ж╪з╪│", "Santali": "рдЕрдирд╛рдирд╛рд╕"},
            "ladyfinger": {"Hindi": "рднрд┐рдВрдбреА", "Bengali": "ржврзЗржБржбрж╝рж╕", "Tamil": "ро╡рпЖрогрпНроЯрпИроХрпНроХро╛ропрпН", "Telugu": "р░мр▒Жр░Вр░бр░Хр░╛р░п", "Malayalam": "р┤╡р╡Жр┤гр╡Нр┤Яр┤Хр╡Нр┤Х", "Kannada": "р▓мр│Жр▓Вр▓бр│Жр▓Хр▓╛р▓пр▓┐", "Marathi": "рднреЗрдВрдбреА", "Gujarati": "ркнрлАркВркбрк╛", "Odia": "рмнрнЗрмгрнНрмбрм┐", "Punjabi": "ринри┐рй░рибрйА", "Assamese": "ржнрзЗржгрзНржбрж┐", "Urdu": "╪и┌╛┘Ж┌И█М"},
            "tomato": {"Hindi": "рдЯрдорд╛рдЯрд░", "Bengali": "ржЯржорзЗржЯрзЛ", "Tamil": "родроХрпНроХро╛ро│ро┐", "Telugu": "р░Яр░ор░╛р░Яр▒Л", "Malayalam": "р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐", "Kannada": "р▓Яр│Кр▓ор│Зр▓Яр│К", "Marathi": "рдЯреЛрдореЕрдЯреЛ", "Gujarati": "ркЯрк╛ркорлЗркЯрлБркВ", "Odia": "рмЯрморм╛рмЯрнЛ", "Punjabi": "риЯриори╛риЯри░", "Assamese": "ржЯржорзЗржЯрзЛ", "Urdu": "┘╣┘Е╪з┘╣╪▒"},
            "onion": {"Hindi": "рдкреНрдпрд╛рдЬ", "Bengali": "ржкрзЗржБржпрж╝рж╛ржЬ", "Tamil": "ро╡рпЖроЩрпНроХро╛ропроорпН", "Telugu": "р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п", "Malayalam": "р┤Йр┤│р╡Нр┤│р┤┐", "Kannada": "р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐", "Marathi": "рдХрд╛рдВрджрд╛", "Gujarati": "ркбрлБркВркЧрк│рлА", "Odia": "рмкрм┐рмЖрмЬ", "Punjabi": "рикри┐риЖриЬри╝", "Assamese": "ржкрж┐ржБржпрж╝рж╛ржЬ", "Urdu": "┘╛█М╪з╪▓"},
            "water": {"Hindi": "рдкрд╛рдиреА", "Bengali": "ржЬрж▓", "Tamil": "роирпАро░рпН", "Telugu": "р░ир▒Ар░░р▒Б", "Malayalam": "р┤╡р╡Жр┤│р╡Нр┤│р┤В", "Kannada": "р▓ир│Ар▓░р│Б", "Marathi": "рдкрд╛рдгреА", "Gujarati": "рккрк╛ркгрлА", "Odia": "рмкрм╛рмгрм┐", "Punjabi": "рикри╛ригрйА", "Assamese": "ржкрж╛ржирзА", "Urdu": "┘╛╪з┘Ж█М"},
            "rice": {"Hindi": "рдЪрд╛рд╡рд▓", "Bengali": "ржнрж╛ржд", "Tamil": "роЕро░ро┐роЪро┐", "Telugu": "р░Ер░ир▒Нр░ир░В", "Malayalam": "р┤Ър╡Лр┤▒р╡Н", "Kannada": "р▓Ер▓ир│Нр▓и", "Marathi": "рддрд╛рдВрджреВрд│", "Gujarati": "ркЪрлЛркЦрк╛", "Odia": "рмЪрм╛рмЙрм│", "Punjabi": "риЪрйМри▓", "Assamese": "ржнрж╛ржд", "Urdu": "┌Ж╪з┘И┘Д"},
            "bread": {"Hindi": "рд░реЛрдЯреА", "Bengali": "рж░рзБржЯрж┐", "Tamil": "ро░рпКроЯрпНроЯро┐", "Telugu": "р░░р▒Кр░Яр▒Нр░Яр▒Ж", "Malayalam": "р┤▒р╡Кр┤Яр╡Нр┤Яр┤┐", "Kannada": "р▓░р│Кр▓Яр│Нр▓Яр▓┐", "Marathi": "рдкрд╛рд╡", "Gujarati": "рк░рлЛркЯрк▓рлА", "Odia": "рм░рнБрмЯрм┐", "Punjabi": "ри░рйЛриЯрйА", "Assamese": "рз░рзБржЯрзА", "Urdu": "╪▒┘И┘╣█М"},
            "milk": {"Hindi": "рджреВрдз", "Bengali": "ржжрзБржз", "Tamil": "рокро╛ро▓рпН", "Telugu": "р░кр░╛р░▓р▒Б", "Malayalam": "р┤кр┤╛р╡╜", "Kannada": "р▓╣р▓╛р▓▓р│Б", "Marathi": "рджреВрдз", "Gujarati": "ркжрлВркз", "Odia": "рмХрнНрм╖рнАрм░", "Punjabi": "рижрйБрй▒риз", "Assamese": "ржЧрж╛ржЦрзАрз░", "Urdu": "╪п┘И╪п┌╛"}
        }
        
        if text.lower() in words and target_language in words[text.lower()]:
            self.stats["fallback"] += 1
            return words[text.lower()][target_language]
        
        return None
    
    def translate(self, text, target_language):
        text = text.strip()
        if not text:
            return "", "none"
        
        # Try IndicTrans2
        result = self.translate_indictrans(text, target_language)
        if result:
            return result, "indictrans"
        
        # Try fallback
        result = self.translate_fallback(text, target_language)
        if result:
            return result, "fallback"
        
        return "Translation unavailable", "none"
    
    def get_stats(self):
        total = sum(self.stats.values())
        if total == 0:
            return "No translations yet"
        return f"IndicTrans2: {self.stats['indictrans']} | Fallback: {self.stats['fallback']} | Total: {total}"

_translator = None

def get_translator(sarvam_api_key=None, huggingface_token=None, gemini_api_key=None):
    global _translator
    if _translator is None:
        _translator = UltimateTranslator(sarvam_api_key, huggingface_token, gemini_api_key)
    return _translator
